node {
    timeout(time: 60, unit: 'MINUTES') {
            timestamps {
                def cfg = [
                ]
                doWork(cfg)
            }
    }
}

void doWork(cfg) {

    stage("Checkout"){
        deleteDir()
        envInfo()
        appendComment("Working with version <b>${cfg.ref}</b>")
        gitClone(cfg.url, cfg.ref, null, null)
    }

    stage("Seed Jenkins configuration"){
         sh("cp config/jenkins.yaml ${JENKINS_HOME}/jenkins.yaml")
         sh("cp config/theme/rs.css ${JENKINS_HOME}/userContent/rs.css")
    }

    stage("Seed DSL Jobs") {
        cfg.isMasterMerged = cfg.ref == 'master' ? true : getShOutput("git merge-base --is-ancestor origin/master origin/$cfg.ref && echo OK || echo NOT OK ") == "OK"
        if (!cfg.isMasterMerged) {
            appendComment("Branch <b>$cfg.ref doesn't contain latest master</b>")
            error("Branch $cfg.ref doesn't contain latest master")
        }

        jobDsl targets: 'jobs/**/*Jobs.groovy', additionalClasspath: 'src/'
    }
}