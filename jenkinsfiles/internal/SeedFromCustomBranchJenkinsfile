//@Library("rs-pipelines@feature/test") _

node {
    timeout(time: 60, unit: 'MINUTES') {
            timestamps {
                def cfg = [
                        ref       : env.Dsl_Version,
                        url       : gitCloneUrl('rs-pipelines'),
                        scmCredsId: env.SCM_CREDENTIALS_ID,
                ]
                doWork(cfg)
            }
    }
}

void doWork(cfg) {
    stage("Checkout"){
        deleteDir()
        envInfo()
        appendComment("Working with version <b>${cfg.ref}</b>")

        gitClone(cfg.url, cfg.ref, null, null)
    }
    stage("Configuration"){
         sh("cp config/jenkins.yaml env.JENKINS_HOME/var/jenkins_home/jenkins.yaml")

    }
    stage("Do work") {

        cfg.isMasterMerged = cfg.ref == 'master' ? true : getShOutput("git merge-base --is-ancestor origin/master origin/$cfg.ref && echo OK || echo NOT OK ") == "OK"
        if (!cfg.isMasterMerged) {
            appendComment("Branch <b>$cfg.ref doesn't contain latest master</b>")
            error("Branch $cfg.ref doesn't contain latest master")
        }

        jobDsl targets: 'jobs/**/*Jobs.groovy', additionalClasspath: 'src/'
    }
}