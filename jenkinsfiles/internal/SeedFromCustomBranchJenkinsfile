@Library("rs-pipelines@feature/test") _
node {
    timeout(time: 60, unit: 'MINUTES') {
            timestamps {
                def cfg = [
                        ref       : env.Dsl_Version,
                        url       : gitCloneUrl('rs-jenkins-jobs'),
                        scmCredsId: env.SCM_CREDENTIALS_ID,
                ]
                doWork(cfg)
            }
    }
}

void doWork(cfg) {
    stage("Do work") {
        deleteDir()
        envInfo()
        appendComment("Working with version <b>${cfg.ref}</b>")

        gitClone(cfg.url, cfg.ref, cfg.scmCredsId, null)

        cfg.isDevelopMerged = cfg.ref == 'develop' ? true : getShOutput("git merge-base --is-ancestor origin/develop origin/$cfg.ref && echo OK || echo NOT OK ") == "OK"

        if (!cfg.isDevelopMerged) {
            appendComment("Branch <b>$cfg.ref doesn't contain latest develop</b>")
            error("Branch $cfg.ref doesn't contain latest develop")
        }

        jobDsl targets: 'jobs/**/*Jobs.groovy', additionalClasspath: 'src/'
    }
}